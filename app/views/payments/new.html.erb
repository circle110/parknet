<%= render(:partial => 'shared/error_messages', :locals => {:object => @payment}) %>
<% if /registration/.match(request.env['HTTP_REFERER']) %>
	<%= link_to("<<Back to Registration without making a payment.", {:action => 'registration', :controller => 'staff_registration'}, :class => 'back-link') %>
<% else %>
	<%= link_to("<<Back to Membership Management", {:action => 'memberships', :controller => 'staff_membership_sales'}, :class => 'back-link') %>
<% end %>


<h4>Take Payment for Account (<%= @account.home_area %>)<%= @account.home_phone[0..2] %>-<%= @account.home_phone[3..6] %> || <%= @account.email %></h4>

<% create_payment_arrays %>

<% if @new_registration_fees.to_i == 0 && @new_membership_fees.to_i == 0 %>
	<div id="no-balance">
	There are no items to pay for at this time. 
	</div>
<% elsif (@total_balance + @new_registration_fees) > 0 && !params.has_key?(:use_account_balance) %>
		<div id="use_account">
		This account has an existing credit balance of <%= number_to_currency(@total_balance + @new_registration_fees) %>. Would you like to apply that credit balance to pay for these new expenditures?<br>
		<%= link_to("Yes", {:action => 'new', :controller => 'payments',  :account_id => session[:account_id], :payment_type_id => params[:payment_type_id], :use_account_balance => 1}, :class => 'back-link') %> ||
		<%= link_to("No", {:action => 'new', :controller => 'payments',  :account_id => session[:account_id], :payment_type_id => params[:payment_type_id], :use_account_balance => 0}, :class => 'back-link') %>
		</div>
<% else %>
	<br>
	<% if [1,2].include?(session[:payment_type_id].to_i) %>
		<%= form_for @payment, url: {action: "create"} do |f| %>
			<%= f.hidden_field(:agency_id, :value => session[:agency_id]) %>
			<%= f.hidden_field(:user_stamp, :value => session[:staff_user_id]) %>
			<%= f.hidden_field(:creation_user_stamp, :value => session[:staff_user_id]) %>
			<%= f.hidden_field(:location_id, :value => 2) %>
			<%= f.hidden_field(:account_id, :value => @account.id) %>
			
			<ul>
				<li class="field">
					<%= f.label :payment_type_id, 'Payment Type' %> 
					<%= f.select(:payment_type_id, ([["Cash", "1"], ["Check", "2"]]), prompt: "--Select Payment Type--") %>
				</li>
				<div id="check_number" class="hidden_at_load">
				<li class="field">
					<%= f.label :check_number, 'Check Number' %>
					<%= f.text_field(:check_number) %>
				</li>
				</div>
				<% if params[:use_account_balance].to_i == 1 %>
					<div id="payment_account">
						<li class="field">
							Amount to be paid using credit balance on account:<br>
							<%= number_to_currency(@total_balance + @new_registration_fees) %>
						</li>
					</div>
				<% end %>
				<li class="field">
				<div id="payment_label">
					<%= f.label :amount, 'Payment Amount' %>
				</div>
				<% if params[:use_account_balance].to_i == 1 %>
					<% to_pay = @total_balance.abs %>
				<% else %>
					<% to_pay = (@total_balance).abs %>
				<% end %>
					<%= f.text_field(:amount, :value => to_pay) %>
				</li>

				</ul>
				________________________________________________________________________<br>
				<h5>Payment Allocations</h5>
			<%= render partial: 'builder', locals: { f: f } %>

		<% end %>
		
	<% else %>

		<%= form_for @payment, url: {action: "create"} do |f| %>
		
				<%= f.hidden_field(:agency_id, :value => session[:agency_id]) %>
				<%= f.hidden_field(:user_stamp, :value => session[:staff_user_id]) %>
				<%= f.hidden_field(:creation_user_stamp, :value => session[:staff_user_id]) %>
				<%= f.hidden_field(:location_id, :value => "1") %>
				<%= f.hidden_field(:account_id, :value => session[:account_id]) %>
				<%= f.hidden_field(:payment_type_id, :value => "3") %>
			
			<div class="field">
			<%= f.label :amount %>
			<%= f.text_field :amount, :value => @total_balance.round(2).abs %>
			</div>
			<div class="field">
			<%= label_tag :card_number, "Credit Card Number" %>
			<%= text_field_tag :card_number, nil, name: nil %>
			</div>
			<div class="field">
			<%= label_tag :card_cvc, "Security Code on Card (CVC)" %>
			<%= text_field_tag :card_cvc, nil, name: nil %>
			</div>
			<div class="field">
			<%= label_tag :card_month, "Card Expiration" %>
			<%= select_month nil, {add_month_numbers: true}, {name: nil, id: "card_expiry_month"} %>
			<%= select_year nil, {start_year: Date.today.year, end_year: Date.today.year+15}, {name: nil, id: "card_expiry_year"} %>
			</div>
		________________________________________________________________________
		<br>
			<%= render partial: 'builder', locals: { f: f } %>
			
			<div class="actions">
			<%= f.submit "Charge Card" %>
			</div>
			
		<% end %>
		

		<script type="text/javascript">
		Stripe.setPublishableKey('pk_test_ldAbOSYOYB7gnfM5iH3jsco4');
 
		var stripeResponseHandler = function(status, response) {
		var $form = $('#new_payment');
		 
		if (response.error) {
		// Show the errors on the form
		alert(response.error.message);
		$form.find('.payment-errors').text(response.error.message);
		$form.find('submit').prop('disabled', false);
		} else {
		// token contains id, last4, and card type
		var token = response.id;
		alert(token);
		// Insert the token into the form so it gets submitted to the server
		$form.append($('<input type="hidden" name="stripe_token" />').val(token));
		$form.append($('<input type="hidden" name="last_4" />').val(response.card.last4));
		// and re-submit
		$form.get(0).submit();
		}
		};
		 
		jQuery(function($) {
		$('#new_payment').submit(function(e) {
		var $form = $(this);
		alert('gotcha');
		 
		// Disable the submit button to prevent repeated clicks
		$form.find('submit').prop('disabled', true);

		Stripe.card.createToken({
			number: $('#card_number').val(),
			cvc: $('#card_cvc').val(),
			exp_month: $('#card_expiry_month').val(),
			exp_year: $('#card_expiry_year').val()
		}, stripeResponseHandler);
		 
		// Prevent the form from submitting with the default action
		return false;
		});
		});

	</script>
	<% end %>


<% end %>


	<script type="text/javascript">
		$(function(){
		    $('#new_payment').on('submit', function() {
				if ($('#payment_payment_type_id').val() == ""){
					alert('Please Select Payment Type.');
					return false;
				}
				if ($('#payment_check_number').is(":visible") && $('#payment_check_number').val() == ""){
					alert('Please Enter Check Number.');
					return false;
				}
			});
		
			<% if @payment.payment_type_id == 2 %>
					$("#check_number").show();
					$('#payment_label').text("Amount to be paid by check");
			<% end %>
			
			
			$('#payment_payment_type_id').change(function () { 
				if ($('#payment_payment_type_id').val() == "2"){
					$("#check_number").show();
					$("[class^=payment_type_text]").text("Check");
					$('#payment_label').text("Amount to be paid by check");
				} else {
					$("#check_number").hide();
					$("[class^=payment_type_text]").text("Cash");
					$('#payment_label').text("Amount to be paid by cash");
				}
			});
		
		<% i = 0 %>		
		<% @payment_from_cab.each do %>	
			$('#payment_payment_allocations_attributes_<%= i %>_amount_from_account').change(function () {
			
			});
			$('#payment_payment_allocations_attributes_<%= i %>_amount').change(function () {
			
			});
			<% i += 1 %>
		<% end %>
		});
	</script>
